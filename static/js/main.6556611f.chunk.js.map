{"version":3,"sources":["Modal.js","App.js","serviceWorker.js","index.js"],"names":["Modal","_Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","react_default","a","createElement","lib_default","channel","isOpen","videoId","onClose","Component","MapContainer","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","apply","concat","state","showingInfoWindow","activeMarker","selectedPlace","modalState","setState","onMarkerClick","video","onRightClick","marker","e","console","log","onMapClicked","dist","google","zoom","onClick","initialCenter","lat","lng","onMouseover","name","position","visible","Modal_Modal","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6556611f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ModalVideo from 'react-modal-video'\n\nexport class Modal extends Component {\n\n constructor (props) {\n   super(props)\n }\n\n render () {\n   return (\n     <div>\n       <ModalVideo channel='youtube' isOpen={this.props.isOpen} videoId={this.props.videoId} onClose={this.props.onClose} />\n     </div>\n   );\n }\n}\n","import React, { Component } from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport ReactDOM from 'react-dom'\nimport {Modal} from './Modal.js'\nimport '../node_modules/react-modal-video/scss/modal-video.scss';\n\nexport class MapContainer extends Component {\n\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {},\n    modalState: false,\n    videoId: null,\n  };\n\n  onClose = () => this.setState({modalState: false});\n\n  onMarkerClick = (props) =>\n    this.setState({\n      modalState: true,\n      videoId: props.video\n  });\n\n  onRightClick = (props, marker, e) => console.log('sdflj')\n    // this.setState({\n    //   selectedPlace: props,\n    //   activeMarker: marker,\n    //   showingInfoWindow: true,\n    // });\n\n\n  onMapClicked = (props) =>\n  {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n        modalState: false\n      })\n    }\n  };\n\n  render() {\n    return (\n      <div>\n      <Map\n        google={this.props.google}\n        zoom={8}\n        onClick={this.onMapClicked}\n        initialCenter={{\n          lat: 35.787743,\n          lng: -78.64425\n        }}\n        >\n        <Marker onClick={this.onMarkerClick}\n                onMouseover={this.onRightClick}\n                name={'Mountains FB 18'}\n                position={{lat: 36.6212, lng: -81.4845}} //greyson highlands\n                video={'Vk_-KmWtbBE'}\n\n         />\n         <Marker onClick={this.onMarkerClick}\n                 onMouseover={this.onRightClick}\n                 name={'Okeechobee SB 18'}\n                 position={{lat: 27.2439, lng: -80.8298}} //okee\n                 video={'w_pREDw12uE'}\n          />\n        <Marker onClick={this.onMarkerClick}\n                onMouseover={this.onRightClick}\n                name={'Singapore Summer 18'}\n                position={{lat: 1.3521, lng: 103.8198}} //Singapore\n                video={'mn820dv6bv0'}\n         />\n         <Marker onClick={this.onMarkerClick}\n                 onMouseover={this.onRightClick}\n                 name={'Singapore Summer 18'}\n                 position={{lat: 35.7688, lng: -78.6619}} //Dorthea Dix\n                 video={'sejVTQPwHnM'}\n          />\n          <Marker onClick={this.onMarkerClick}\n                  onMouseover={this.onRightClick}\n                  name={'NYC Dec 17'}\n                  position={{lat: 40.7128, lng: -74.0060}} //NYC\n                  video={'URCZsdvXF2s'}\n           />\n\n         <InfoWindow\n           marker={this.state.activeMarker}\n           visible={this.state.showingInfoWindow}>\n             <div>\n               <h1>{this.state.selectedPlace.name}</h1>\n             </div>\n         </InfoWindow>\n      </Map>\n      <Modal videoId={this.state.videoId} onClose={this.onClose} isOpen={this.state.modalState}/>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCnY73kvyiQLtQwpli9k2GgD-G0dlAe8N0'\n})(MapContainer)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import {Modal, MapContainer} from './App';\nimport App from './App';\nimport {Modal} from './Modal';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}